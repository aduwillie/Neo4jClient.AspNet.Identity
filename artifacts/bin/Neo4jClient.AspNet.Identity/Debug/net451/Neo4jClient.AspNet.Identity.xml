<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neo4jClient.AspNet.Identity</name>
    </assembly>
    <members>
        <member name="T:Neo4jClient.AspNet.Identity.IdentityClaim`1">
            <summary>
            Represents a claim that a user possesses. 
            </summary>
            <typeparam name="TKey">The type used for the primary key for this user that possesses this claim.</typeparam>
        </member>
        <member name="P:Neo4jClient.AspNet.Identity.IdentityClaim`1.ClaimType">
            <summary>
            Gets or sets the claim type for this claim.
            </summary>
        </member>
        <member name="P:Neo4jClient.AspNet.Identity.IdentityClaim`1.ClaimValue">
            <summary>
            Gets or sets the claim value for this claim.
            </summary>
        </member>
        <member name="T:Neo4jClient.AspNet.Identity.IdentityLogin`1">
            <summary>
            Represents a login and its associated provider for a user.
            </summary>
            <typeparam name="TKey">The type of the primary key of the user associated with this login.</typeparam>
        </member>
        <member name="P:Neo4jClient.AspNet.Identity.IdentityLogin`1.LoginProvider">
            <summary>
            Gets or sets the login provider for the login (e.g. facebook, google)
            </summary>
        </member>
        <member name="P:Neo4jClient.AspNet.Identity.IdentityLogin`1.ProviderKey">
            <summary>
            Gets or sets the unique provider identifier for this login.
            </summary>
        </member>
        <member name="P:Neo4jClient.AspNet.Identity.IdentityLogin`1.ProviderDisplayName">
            <summary>
            Gets or sets the friendly name used in a UI for this login.
            </summary>
        </member>
        <member name="T:Neo4jClient.AspNet.Identity.IdentityRole">
            <summary>
            The default implementation of <see cref="T:Neo4jClient.AspNet.Identity.IdentityRole`1"/> which uses a string as the primary key.
            </summary>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.IdentityRole.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Neo4jClient.AspNet.Identity.IdentityRole"/>.
            </summary>
            <remarks>
            The Id property is initialized to from a new GUID string value.
            </remarks>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.IdentityRole.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Neo4jClient.AspNet.Identity.IdentityRole"/>.
            </summary>
            <param name="roleName">The role name.</param>
            <remarks>
            The Id property is initialized to from a new GUID string value.
            </remarks>
        </member>
        <member name="T:Neo4jClient.AspNet.Identity.IdentityRole`1">
            <summary>
            Represents a role in the identity system
            </summary>
            <typeparam name="TKey">The type used for the primary key for the role.</typeparam>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.IdentityRole`1.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Neo4jClient.AspNet.Identity.IdentityRole`1"/>.
            </summary>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.IdentityRole`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Neo4jClient.AspNet.Identity.IdentityRole`1"/>.
            </summary>
            <param name="roleName">The role name.</param>
        </member>
        <member name="P:Neo4jClient.AspNet.Identity.IdentityRole`1.Users">
            <summary>
            Navigation property for the users in this role.
            </summary>
        </member>
        <member name="P:Neo4jClient.AspNet.Identity.IdentityRole`1.Claims">
            <summary>
            Navigation property for claims in this role.
            </summary>
        </member>
        <member name="P:Neo4jClient.AspNet.Identity.IdentityRole`1.Name">
            <summary>
            Gets or sets the name for this role.
            </summary>
        </member>
        <member name="P:Neo4jClient.AspNet.Identity.IdentityRole`1.NormalizedName">
            <summary>
            Gets or sets the normalized name for this role.
            </summary>
        </member>
        <member name="P:Neo4jClient.AspNet.Identity.IdentityRole`1.ConcurrencyStamp">
            <summary>
            A random value that should change whenever a role is persisted to the store
            </summary>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.IdentityRole`1.ToString">
            <summary>
            Returns the name of the role.
            </summary>
            <returns>The name of the role.</returns>
        </member>
        <member name="T:Neo4jClient.AspNet.Identity.IdentityUser">
            <summary>
            The default implementation of <see cref="T:Neo4jClient.AspNet.Identity.IdentityUser`1"/> which uses a string as a primary key.
            </summary>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.IdentityUser.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Neo4jClient.AspNet.Identity.IdentityUser"/>.
            </summary>
            <remarks>
            The Id property is initialized to from a new GUID string value.
            </remarks>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.IdentityUser.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Neo4jClient.AspNet.Identity.IdentityUser"/>.
            </summary>
            <param name="userName">The user name.</param>
            <remarks>
            The Id property is initialized to from a new GUID string value.
            </remarks>
        </member>
        <member name="T:Neo4jClient.AspNet.Identity.IdentityUser`1">
            <summary>
            Represents a user in the identity system
            </summary>
            <typeparam name="TKey">The type used for the primary key for the user.</typeparam>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.IdentityUser`1.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Neo4jClient.AspNet.Identity.IdentityUser`1"/>.
            </summary>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.IdentityUser`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Neo4jClient.AspNet.Identity.IdentityUser`1"/>.
            </summary>
            <param name="userName">The user name.</param>
        </member>
        <member name="P:Neo4jClient.AspNet.Identity.IdentityUser`1.UserName">
            <summary>
            Gets or sets the user name for this user.
            </summary>
        </member>
        <member name="P:Neo4jClient.AspNet.Identity.IdentityUser`1.NormalizedUserName">
            <summary>
            Gets or sets the normalized user name for this user.
            </summary>
        </member>
        <member name="P:Neo4jClient.AspNet.Identity.IdentityUser`1.Email">
            <summary>
            Gets or sets the email address for this user.
            </summary>
        </member>
        <member name="P:Neo4jClient.AspNet.Identity.IdentityUser`1.NormalizedEmail">
            <summary>
            Gets or sets the normalized email address for this user.
            </summary>
        </member>
        <member name="P:Neo4jClient.AspNet.Identity.IdentityUser`1.EmailConfirmed">
            <summary>
            Gets or sets a flag indicating if a user has confirmed their email address.
            </summary>
            <value>True if the email address has been confirmed, otherwise false.</value>
        </member>
        <member name="P:Neo4jClient.AspNet.Identity.IdentityUser`1.PasswordHash">
            <summary>
            Gets or sets a salted and hashed representation of the password for this user.
            </summary>
        </member>
        <member name="P:Neo4jClient.AspNet.Identity.IdentityUser`1.SecurityStamp">
            <summary>
            A random value that must change whenever a users credentials change (password changed, login removed)
            </summary>
        </member>
        <member name="P:Neo4jClient.AspNet.Identity.IdentityUser`1.ConcurrencyStamp">
            <summary>
            A random value that must change whenever a user is persisted to the store
            </summary>
        </member>
        <member name="P:Neo4jClient.AspNet.Identity.IdentityUser`1.PhoneNumber">
            <summary>
            Gets or sets a telephone number for the user.
            </summary>
        </member>
        <member name="P:Neo4jClient.AspNet.Identity.IdentityUser`1.PhoneNumberConfirmed">
            <summary>
            Gets or sets a flag indicating if a user has confirmed their telephone address.
            </summary>
            <value>True if the telephone number has been confirmed, otherwise false.</value>
        </member>
        <member name="P:Neo4jClient.AspNet.Identity.IdentityUser`1.TwoFactorEnabled">
            <summary>
            Gets or sets a flag indicating if two factor authentication is enabled for this user.
            </summary>
            <value>True if 2fa is enabled, otherwise false.</value>
        </member>
        <member name="P:Neo4jClient.AspNet.Identity.IdentityUser`1.LockoutEnd">
            <summary>
            Gets or sets the date and time, in UTC, when any user lockout ends.
            </summary>
            <remarks>
            A value in the past means the user is not locked out.
            </remarks>
        </member>
        <member name="P:Neo4jClient.AspNet.Identity.IdentityUser`1.LockoutEnabled">
            <summary>
            Gets or sets a flag indicating if this user is locked out.
            </summary>
            <value>True if the user is locked out, otherwise false.</value>
        </member>
        <member name="P:Neo4jClient.AspNet.Identity.IdentityUser`1.AccessFailedCount">
            <summary>
            Gets or sets the number of failed login attempts for the current user.
            </summary>
        </member>
        <member name="P:Neo4jClient.AspNet.Identity.IdentityUser`1.Roles">
            <summary>
            Navigation property for the roles this user belongs to.
            </summary>
        </member>
        <member name="P:Neo4jClient.AspNet.Identity.IdentityUser`1.Claims">
            <summary>
            Navigation property for the claims this user possesses.
            </summary>
        </member>
        <member name="P:Neo4jClient.AspNet.Identity.IdentityUser`1.Logins">
            <summary>
            Navigation property for this users login accounts.
            </summary>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.IdentityUser`1.ToString">
            <summary>
            Returns the username for this user.
            </summary>
        </member>
        <member name="P:Neo4jClient.AspNet.Identity.LabeledEntity`1.Id">
            <summary>
            Gets or sets the primary key for this entity
            </summary>
        </member>
        <member name="P:Neo4jClient.AspNet.Identity.LabeledEntity`1.TimeStamp">
            <summary>
            Optimistic concurrency flag
            </summary>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.LabeledEntity`1.ShouldSerializeTimeStamp">
            <summary>
            Never serialize timestamp, currently the control must be manual
            </summary>
            <returns>false</returns>
        </member>
        <member name="P:Neo4jClient.AspNet.Identity.LabeledEntity`1.Labels">
            <summary>
            A formatted string that represents this entity, ex: ":Entity:Nullable"
            </summary>
        </member>
        <member name="T:Neo4jClient.AspNet.Identity.RoleStore`1">
            <summary>
            Creates a new instance of a persistence store for roles.
            </summary>
            <typeparam name="TRole">The type of the class representing a role</typeparam>
        </member>
        <member name="T:Neo4jClient.AspNet.Identity.RoleStore`2">
            <summary>
            Creates a new instance of a persistence store for roles.
            </summary>
            <typeparam name="TRole">The type of the class representing a role.</typeparam>
            <typeparam name="TKey">The type of the primary key for a role.</typeparam>
        </member>
        <member name="P:Neo4jClient.AspNet.Identity.RoleStore`2.ErrorDescriber">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AspNet.Identity.IdentityErrorDescriber"/> for any error that occurred with the current operation.
            </summary>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.RoleStore`2.CreateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Creates a new role in a store as an asynchronous operation.
            </summary>
            <param name="role">The role to create in the store.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the <see cref="T:Microsoft.AspNet.Identity.IdentityResult"/> of the asynchronous query.</returns>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.RoleStore`2.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Updates a role in a store as an asynchronous operation.
            </summary>
            <param name="role">The role to update in the store.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the <see cref="T:Microsoft.AspNet.Identity.IdentityResult"/> of the asynchronous query.</returns>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.RoleStore`2.DeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Deletes a role from the store as an asynchronous operation.
            </summary>
            <param name="role">The role to delete from the store.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the <see cref="T:Microsoft.AspNet.Identity.IdentityResult"/> of the asynchronous query.</returns>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.RoleStore`2.GetRoleIdAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Gets the ID for a role from the store as an asynchronous operation.
            </summary>
            <param name="role">The role whose ID should be returned.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that contains the ID of the role.</returns>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.RoleStore`2.GetRoleNameAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Gets the name of a role from the store as an asynchronous operation.
            </summary>
            <param name="role">The role whose name should be returned.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that contains the name of the role.</returns>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.RoleStore`2.SetRoleNameAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets the name of a role in the store as an asynchronous operation.
            </summary>
            <param name="role">The role whose name should be set.</param>
            <param name="roleName">The name of the role.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.RoleStore`2.ConvertIdFromString(System.String)">
            <summary>
            Converts the provided <paramref name="id"/> to a strongly typed key object.
            </summary>
            <param name="id">The id to convert.</param>
            <returns>An instance of <typeparamref name="TKey"/> representing the provided <paramref name="id"/>.</returns>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.RoleStore`2.ConvertIdToString(`1)">
            <summary>
            Converts the provided <paramref name="id"/> to its string representation.
            </summary>
            <param name="id">The id to convert.</param>
            <returns>An <see cref="T:System.String"/> representation of the provided <paramref name="id"/>.</returns>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.RoleStore`2.FindByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds the role who has the specified ID as an asynchronous operation.
            </summary>
            <param name="roleId">The role ID to look for.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that result of the look up.</returns>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.RoleStore`2.FindByNameAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Finds the role who has the specified normalized name as an asynchronous operation.
            </summary>
            <param name="normalizedRoleName">The normalized role name to look for.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that result of the look up.</returns>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.RoleStore`2.GetNormalizedRoleNameAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Get a role's normalized name as an asynchronous operation.
            </summary>
            <param name="role">The role whose normalized name should be retrieved.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that contains the name of the role.</returns>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.RoleStore`2.SetNormalizedRoleNameAsync(`0,System.String,System.Threading.CancellationToken)">
            <summary>
            Set a role's normalized name as an asynchronous operation.
            </summary>
            <param name="role">The role whose normalized name should be set.</param>
            <param name="normalizedName">The normalized name to set</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.RoleStore`2.Dispose">
            <summary>
            Dispose the stores
            </summary>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.RoleStore`2.GetClaimsAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Get the claims associated with the specified <paramref name="role"/> as an asynchronous operation.
            </summary>
            <param name="role">The role whose claims should be retrieved.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that contains the claims granted to a role.</returns>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.RoleStore`2.AddClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)">
            <summary>
            Adds the <paramref name="claim"/> given to the specified <paramref name="role"/>.
            </summary>
            <param name="role">The role to add the claim to.</param>
            <param name="claim">The claim to add to the role.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.RoleStore`2.RemoveClaimAsync(`0,System.Security.Claims.Claim,System.Threading.CancellationToken)">
            <summary>
            Removes the <paramref name="claim"/> given from the specified <paramref name="role"/>.
            </summary>
            <param name="role">The role to remove the claim from.</param>
            <param name="claim">The claim to remove from the role.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> used to propagate notifications that the operation should be canceled.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="P:Neo4jClient.AspNet.Identity.RoleStore`2.Roles">
            <summary>
            A navigation property for the roles the store contains.
            </summary>
        </member>
        <member name="T:Neo4jClient.AspNet.Identity.UserStore`2">
            <summary>
            Creates a new instance of a persistence store for the specified user and role types.
            </summary>
            <typeparam name="TUser">The type representing a user.</typeparam>
            <typeparam name="TRole">The type representing a role.</typeparam>
            <typeparam name="TContext">The type of the data context class used to access the store.</typeparam>
        </member>
        <member name="P:Neo4jClient.AspNet.Identity.UserStore`3.ErrorDescriber">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AspNet.Identity.IdentityErrorDescriber"/> for any error that occurred with the current operation.
            </summary>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.UserStore`3.AddLoginAsync(`0,Microsoft.AspNet.Identity.UserLoginInfo,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.UserStore`3.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.UserStore`3.ConvertIdFromString(System.String)">
            <summary>
            Converts the provided <paramref name="id"/> to a strongly typed key object.
            </summary>
            <param name="id">The id to convert.</param>
            <returns>An instance of <typeparamref name="TKey"/> representing the provided <paramref name="id"/>.</returns>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.UserStore`3.ConvertIdToString(`2)">
            <summary>
            Converts the provided <paramref name="id"/> to its string representation.
            </summary>
            <param name="id">The id to convert.</param>
            <returns>An <see cref="T:System.String"/> representation of the provided <paramref name="id"/>.</returns>
        </member>
        <member name="T:Neo4jClient.AspNet.Identity.Helpers.Check">
            <summary>
                Static helper class to throw a new <see cref="T:System.Exception" />.
            </summary>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.Helpers.Check.IsNull``1(``0,System.String)">
            <summary>Throws an <see cref="T:System.ArgumentException" /> if the <paramref name="obj" /> given is <c>null</c>.</summary>
            <typeparam name="T">Must be a class.</typeparam>
            <param name="obj">The object to check.</param>
            <param name="parameterName">The name of the parameter the <paramref name="obj" /> was in.</param>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="obj" /> given is <c>null</c>.</exception>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.Helpers.Check.IsIdNull``2(``0,System.String)">
            <summary>Throws an <see cref="T:System.ArgumentException" /> if the <c>Id</c> property in <paramref name="obj" /> is <c>null</c>.</summary>
            <typeparam name="T">Must be a class.</typeparam>
            <param name="obj">The object to check.</param>
            <param name="parameterName">The name of the parameter the <paramref name="obj" /> was in.</param>
            <param name="optionalTest">Optionally an adittional test can be passed</param>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="obj" /> given is <c>null</c>.</exception>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.Helpers.Check.IsNullOrEmpty``1(``0,System.String)">
            <summary>Throws an <see cref="T:System.ArgumentException" /> if the <paramref name="obj" /> given is <c>Empty</c>.</summary>
            <typeparam name="T">Must be a <see cref="T:System.Collections.IEnumerable"/>.</typeparam>
            <param name="obj">The object to check.</param>
            <param name="parameterName">The name of the parameter the <paramref name="obj" /> was in.</param>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="obj" /> given is <c>null</c>.</exception>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.Helpers.Check.IsNullOrWhiteSpace(System.String,System.String)">
            <summary>Throws an <see cref="T:System.ArgumentException" /> if the <paramref name="s" /> given is <c>null</c> or whitespace.</summary>
            <param name="s">The string to check.</param>
            <param name="parameterName">The name of the parameter the <paramref name="s" /> was in.</param>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="s" /> given is <c>null</c> or whitespace.</exception>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.Helpers.CypherHelper.Labels(System.Type)">
            <summary>
            Recover labels for the type
            </summary>
            <param name="type">Type to look</param>
            <returns>Formatted string labels</returns>
        </member>
        <member name="M:Neo4jClient.AspNet.Identity.Helpers.Neo4jLabelAttribute.LabelsFor``2">
            <summary>
            Auxiliar method to access the Neo4j Labels per class
            </summary>
            <typeparam name="T">Class to recover labels</typeparam>
            <returns>Labels</returns>
        </member>
    </members>
</doc>
